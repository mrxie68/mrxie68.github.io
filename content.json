{"meta":{"title":"Mr. Xie’s life","subtitle":"","description":"","author":"mr.xie","url":"https://mrxie98.github.io","root":"/"},"pages":[{"title":"","date":"2020-12-08T13:28:58.672Z","updated":"2020-12-06T10:38:46.000Z","comments":true,"path":"contributors/index.html","permalink":"https://mrxie98.github.io/contributors/index.html","excerpt":"","text":""},{"title":"","date":"2020-12-08T13:28:58.682Z","updated":"2020-12-07T18:36:05.000Z","comments":true,"path":"tags/index.html","permalink":"https://mrxie98.github.io/tags/index.html","excerpt":"","text":"每日一言 fetch('https://v1.hitokoto.cn') .then(response => response.json()) .then(data => { const hitokoto = document.getElementById('hitokoto_text') hitokoto.innerText = data.hitokoto }) .catch(console.error)"},{"title":"","date":"2020-12-08T13:28:58.679Z","updated":"2020-12-06T10:38:05.000Z","comments":false,"path":"ss/index.html","permalink":"https://mrxie98.github.io/ss/index.html","excerpt":"","text":"2020-12-？ 还没有需要更新的啥 2020-12-5 排除内置标签video和video.js不兼容 2020-12-01 开始调试搭建网站"},{"title":"","date":"2020-12-08T15:51:55.507Z","updated":"2020-12-08T15:51:55.507Z","comments":false,"path":"gy/index2.html","permalink":"https://mrxie98.github.io/gy/index2.html","excerpt":"","text":"也不知道写什么，所以我挡住了，鼠标放上去就可看见了哦 这里啥都没有，哈哈哈"},{"title":"","date":"2020-12-14T18:48:06.192Z","updated":"2020-12-14T18:48:06.192Z","comments":true,"path":"wangpan/index.html","permalink":"https://mrxie98.github.io/wangpan/index.html","excerpt":"","text":"/** * SCF_GATEWAY：SCF 云函数网关地址 * SITE_NAME：站点名称 */ window.GLOBAL_CONFIG = { SCF_GATEWAY: \"https://wp.0412.cf\", SITE_NAME: \"mrxie\", IS_CF: true }; if (window.GLOBAL_CONFIG.SCF_GATEWAY.indexOf('workers') === -1) { window.GLOBAL_CONFIG.SCF_GATEWAY += '/fodi/'; window.GLOBAL_CONFIG.IS_CF = false; } // if (location.protocol === 'http:') { // location.href = location.href.replace(/http/, 'https'); // } .password-wrapper { display: flex; align-items: center; } .password { margin: 0 auto; padding-top: 1em; display: none; } .password input { height: 2em; outline: none; border: solid rgb(218, 215, 215) 1px; } .password button { background: white; height: 2em; outline: none; border: solid rgb(218, 215, 215) 1px; } .password button:hover { color: white; background: rgb(218, 215, 215); } pre * { font-family: Courier New; } .preview { display: none; font-size: .8em; } .content { clear: both; padding: 0 1em; margin: 0 auto; text-align: center; } .file-name { line-height: 1em; padding: 1em 1em 0; text-align: center; white-space: nowrap; overflow: hidden; } .btn { float: right; text-align: center; border: solid rgb(218, 215, 215) 1px; border-radius: 1em; margin: 1em .2em; width: 4em; height: 2em; line-height: 2em; user-select: none; -moz-user-select: none; -o-user-select: none; -khtml-user-select: none; -webkit-user-select: none; -ms-user-select: none; } .btn:hover { color: white; background: rgb(218, 215, 215); } .btn.download { margin-right: 1em; } #arrow-back, #arrow-forward { color: rgb(218, 215, 215); } .loading-wrapper { display: none; position: fixed; height: 2em; line-height: 2em; margin-top: .5em; width: 100%; z-index: 1; } .loading { color: white; background: rgb(218, 215, 215); height: 100%; width: 8em; margin: 0 auto; text-align: center; border-radius: 1em; } ion-icon { font-size: 1.5em; } * { box-sizing: border-box; font-family: serif; } .markdown-body { min-width: 200px; margin: 0 auto; padding: .7em 1em; font-size: .8em; } .markdown-body h1, h2, h3, h4, h5, h6 { margin-top: 0; } .markdown-body img { max-width: 90%; max-height: 800px; width: auto; height: auto; display: block; margin: 0 auto; } body { width: 100%; height: 100%; margin: 0; padding: 0; } .header-wrapper { position: fixed; height: 3em; width: 100%; -moz-user-select: none; -o-user-select: none; -khtml-user-select: none; -webkit-user-select: none; -ms-user-select: none; user-select: none; } .header { padding: 0 1.8em 0 1em; height: 100%; display: flex; align-items: center; border-bottom: solid rgb(218, 215, 215) 1px; } .logo { margin-right: .3em; } .site { white-space: nowrap; /* margin-left: auto; padding-left: 2em; */ } .nav { width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } .nav-path, .nav-arr { font-size: 1em; height: 1.5em; margin-right: .3em; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: default; } #main-page:hover, .nav-path:hover, .tree-node:hover, .row.file-wrapper:hover { color: rgb(90, 101, 133); cursor: pointer; } .container { position: fixed; width: 100%; height: calc(100% - 3em); margin-top: 3em; } .main { position: relative; height: 100%; width: 100%; } .left { position: absolute; display: inline-grid; width: 20%; height: 100%; font-size: .8em; overflow: scroll; } .tree-node-wrapper { margin-left: 1.5em; } .tree-node { display: flex; align-items: center; } .tree-node-name { margin-left: .3em; white-space: nowrap; } .right { position: absolute; width: 80%; height: 100%; margin-left: 20%; overflow: scroll; } .row { height: 2.5em; padding: 0 .8em 0 1em; display: flex; align-items: center; border-bottom: solid rgb(218, 215, 215) 1px; } .row.file-wrapper { font-size: .8em; padding: 0 1em; height: 2em; } .file { width: 100%; display: flex; align-items: center; } .name { display: flex; align-items: center; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; width: 70%; padding-left: .3em; } .list-header .name { width: calc(70% + 1.1em); padding-left: 0; } .time { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; text-align: right; ; width: 133px; } .size { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; margin-left: auto; } @media screen and (max-width: 1000px) { .left { display: none; } .right { width: 100%; margin-left: initial; } } @media screen and (max-width: 800px) { .name { width: 60%; } .list-header .name { width: calc(60% + 1.1em); } .file-name { overflow-x: scroll; height: 100%; } } @media screen and (max-width: 600px) { .name { width: 75%; } .time { display: none; } .header { padding: 0 .3em; } .row { padding: 0 .3em; } .row.file-wrapper { padding: 0 .3em; height: 3em; } .markdown-body { padding: .6em .3em; } .file-name { padding: 1em .3em 0; } .content { padding: 0 .3em; } .btn.download { margin-right: .3em; } .logo { width: 2em; height: 2em; } } function createCORSRequest(method, url, timeout) { let xhr = new XMLHttpRequest(); if ('withCredentials' in xhr) { xhr.open(method, url, true); } else if (typeof XDomainRequest !== 'undefined') { xhr = new XDomainRequest(); xhr.open(method, url); } else { xhr = null; } if (xhr) { xhr.timeout = timeout; } return xhr; } function sendRequest(method, url, data, headers, callback, error, times) { let xhr = createCORSRequest(method, url, 2500); xhr.onreadystatechange = () => { if (xhr.readyState == 4 && xhr.status == 200) { callback(xhr.responseText); } }; xhr.timeout = xhr.onerror = () => { if (!times) { times = 0; } console.log({ url: url, data: data, times: times }) if (times < 1) { sendRequest(method, url, data, headers, callback, error, times + 1); } else if (typeof error === 'function') { error(); } } if (headers) { for (key in headers) { if (headers.hasOwnProperty(key)) { xhr.setRequestHeader(key, headers[key]); } } } if (data) { xhr.send(data); } else { xhr.send(); } } function renderPage(data, cache) { let files; if (data) { files = JSON.parse(data); window.fileCache.set(files.parent, files); preCache(files, 0); } else { files = cache; } if (files.parent === window.backFordwardCache.current) { renderPath(files.parent); if (files.encrypted) { handleEncryptedFolder(files); } else { renderFileList(files); } renderTreeNode(files); } if (document.body.getAttribute('hidden')) { document.body.removeAttribute('hidden'); } document.querySelector('.loading-wrapper').style.display = 'none'; } function renderPath(path) { const createPathSpan = (text, path) => { let pathSpan = document.createElement('span'); pathSpan.innerHTML = text.length > 20 ? text.substring(0, 20) + '..' : text; pathSpan.className = text === '/' ? 'nav-arr' : 'nav-path'; if (path) { addPathListener(pathSpan, path); } return pathSpan; }; const paths = path.split('/'); let pathSpanWrapper = document.getElementById('path'); pathSpanWrapper.innerHTML = ''; pathSpanWrapper.appendChild(createPathSpan(window.api.root)); let continualPath = '/'; for (let i = 1; i < paths.length - 1; i++) { continualPath += paths[i]; pathSpanWrapper.appendChild(createPathSpan(paths[i], continualPath)); pathSpanWrapper.appendChild(createPathSpan('/')); continualPath += '/'; } pathSpanWrapper.appendChild(createPathSpan(paths[paths.length - 1])); } function renderFileList(files) { switchRightDisplay(); const createFileWrapper = (type, name, time, size, path, url) => { let fileWrapper = document.getElementById('file-wrapper-templete').content.cloneNode(true); fileWrapper.querySelector('ion-icon').setAttribute('name', type); fileWrapper.querySelector('.name').innerHTML = name; fileWrapper.querySelector('.time').innerHTML = time; fileWrapper.querySelector('.size').innerHTML = size; addFileListLineListener(fileWrapper.querySelector('.row.file-wrapper'), path, url, size); return fileWrapper; }; const formatDate = date => { const addZero = num => num > 9 ? num : '0' + num; date = new Date(date); const year = date.getFullYear(); const month = addZero(date.getMonth() + 1); const day = addZero(date.getDate()); const hour = addZero(date.getHours()); const minute = addZero(date.getMinutes()); const second = addZero(date.getSeconds()); return 'yyyy-MM-dd HH:mm:ss' .replace('yyyy', year) .replace('MM', month) .replace('dd', day) .replace('HH', hour) .replace('mm', minute) .replace('ss', second); }; const formatSize = size => { let count = 0; while (size >= 1024) { size /= 1024; count++; } size = size.toFixed(2); switch (count) { case 1: size += ' KB'; break; case 2: size += ' MB'; break; case 3: size += ' GB'; break; case 4: size += ' TB'; break; case 5: size += ' PB'; break; default: size += ' B'; } return size; }; let fileList = document.getElementById('file-list'); fileList.innerHTML = ''; files.files.forEach(file => { if (file.name.split('.').pop() === 'md') { if (file.url) { renderReadme(files.parent + '/' + file.name, file.url); } } else { const parent = files.parent === window.api.root ? '' : files.parent; fileList.appendChild(createFileWrapper( file.url ? 'document' : 'folder', file.name, formatDate(file.time), formatSize(file.size), parent + '/' + file.name, file.url )); } }); } async function renderTreeNode(files) { const createTreeNodeWrapper = (array, type, name, path) => { let treeNodeWrapper = document.getElementById('tree-node-wrapper-template').content .cloneNode(true); let icons = treeNodeWrapper.querySelectorAll('ion-icon'); icons[0].setAttribute('name', array); icons[1].setAttribute('name', type); treeNodeWrapper.querySelector('.tree-node-name').innerText = name; treeNodeWrapper.appendNode = node => treeNodeWrapper.querySelector('.tree-node-wrapper').append( node); addTreeNodeListener(treeNodeWrapper.querySelector('.tree-node'), path); return treeNodeWrapper; } const paths = files.parent.split('/'); let absolutePath = max => { let absolutePath = ''; for (let j = 1; j { if (!file.url) { currentTreeNode.appendNode(createTreeNodeWrapper('arrow-dropright', 'folder', file.name, files.parent + '/' + file.name )); } }); for (let i = maxIndex - 1; i > 0; i--) { const currentTreeNodeParentAbsolutePath = absolutePath(i); let currentTreeNodeParent = createTreeNodeWrapper('arrow-dropdown', 'folder', paths[i], currentTreeNodeParentAbsolutePath ); let cache = window.fileCache.get(currentTreeNodeParentAbsolutePath); if (cache) { cache.files.forEach(file => { if (!file.url) { if (file.name === paths[i + 1]) { currentTreeNodeParent.appendNode(currentTreeNode); } else { currentTreeNodeParent.appendNode(createTreeNodeWrapper( 'arrow-dropright', 'folder', file.name, currentTreeNodeParentAbsolutePath + '/' + file.name )); } } }); } else { currentTreeNodeParent.appendNode(currentTreeNode); } currentTreeNode = currentTreeNodeParent; } const treeRoot = document.getElementById('tree-root'); treeRoot.innerHTML = ''; const cache = window.fileCache.get(window.api.root); const currentNodeName = currentTreeNode.querySelector('.tree-node-name').innerText; if (cache) { cache.files.forEach(file => { if (!file.url) { if (file.name === currentNodeName) { treeRoot.append(currentTreeNode); } else { treeRoot.append(createTreeNodeWrapper( 'arrow-dropright', 'folder', file.name, window.api.root + file.name )); } } }); } else { treeRoot.append(currentTreeNode); } } async function renderReadme(path, url) { const render = text => { let markedText; try { markedText = marked(text, { gfm: true, highlight: (code, lang, callback) => { return hljs.highlight(lang, code).value; } }); } catch (e) { markedText = marked(text, { gfm: true, highlight: (code, lang, callback) => { return hljs.highlight('bash', code).value; } }); } if (window.backFordwardCache.current + '/README.md' === path) { if (!window.backFordwardCache.preview) { document.getElementById('readme').innerHTML = markedText; document.querySelector('.markdown-body').style.display = 'block'; } } let cache = window.fileCache.get(path); if (!cache || cache === true) { window.fileCache.set(path, text); } }; let text = window.fileCache.get(path); if (text === true) { let cacheWaitReadmeFetch = setInterval(() => { text = window.fileCache.get(path); if (typeof text === 'object') { render(text, path); clearInterval(cacheWaitReadmeFetch); } else if (text === false) { clearInterval(cacheWaitReadmeFetch); } }, 100); } else if (text) { render(text, path); } else { window.fileCache.set(path, true); sendRequest('GET', url, null, null, text => render(text, path), () => window.fileCache.set(path, false)); } } function handleEncryptedFolder(files) { switchRightDisplay('encrypted'); const password = document.querySelector('.password'); const input = password.querySelector('input'); const button = password.querySelector('button'); const buttonParent = button.parentElement; const buttonClone = button.cloneNode(true); buttonParent.replaceChild(buttonClone, button); input.placeholder = '请输入密码'; buttonClone.addEventListener('click', event => { const passwd = input.value; if (!input.value) { return; } input.value = ''; input.placeholder = '正在验证..'; sendRequest(window.api.method, window.api.url, window.api.formatPayload(files.parent, passwd), window.api.headers, data => { const newFiles = JSON.parse(data); if (newFiles.encrypted) { input.placeholder = '密码错误'; } else { window.fileCache.set(newFiles.parent, newFiles); fetchFileList(newFiles.parent); } }, () => window.fileCache.set(newFiles.parent, false) ); }); } function addPathListener(elem, path) { elem.addEventListener('click', event => { fetchFileList(path); switchBackForwardStatus(path); }); } function addTreeNodeListener(elem, path) { elem.addEventListener('click', event => { fetchFileList(path); switchBackForwardStatus(path); }); } function addFileListLineListener(elem, path, url, size) { if (url) { elem.addEventListener('click', event => { window.backFordwardCache.preview = true; const previewHandler = { copyTextContent: (source, text) => { let result = false; let target = document.createElement('pre'); target.style.opacity = '0'; target.textContent = text || source.textContent; document.body.appendChild(target); try { let range = document.createRange(); range.selectNode(target); window.getSelection().removeAllRanges(); window.getSelection().addRange(range); document.execCommand('copy'); window.getSelection().removeAllRanges(); result = true; } catch (e) { } document.body.removeChild(target); return result; }, fileType: suffix => { Array.prototype.contains = function (search) { const object = this; for (const key in object) { if (object.hasOwnProperty(key)) { if ((eval('/' + search + '/i')).test(object[key])) { return true; } } } return false; }; if (['bmp', 'jpg', 'png', 'svg', 'webp', 'gif'].contains(suffix)) { return 'image'; } else if (['mp3', 'flac', 'wav'].contains(suffix)) { return 'audio'; } else if (['mp4', 'avi', 'mkv', 'flv', 'm3u8'].contains(suffix)) { return 'video'; } else if ( [ 'txt', 'js', 'json', 'css', 'html', 'java', 'c', 'cpp', 'php', 'cmd', 'ps1', 'bat', 'sh', 'py', 'go', 'asp', ].contains(suffix) ) { return 'text'; } else if ( ['doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'mpp', 'rtf', 'vsd', 'vsdx'].contains(suffix) ) { return 'office'; } }, loadResource: (resource, callback) => { let type; switch (resource.split('.').pop()) { case 'css': type = 'link'; break; case 'js': type = 'script'; break; } let element = document.createElement(type); let loaded = false; if (typeof callback === 'function') { element.onload = element.onreadystatechange = () => { if (!loaded && (!element.readyState || /loaded|complete/.test( element.readyState))) { element.onload = element.onreadystatechange = null; loaded = true; callback(); } } } if (type === 'link') { element.href = resource; element.rel = 'stylesheet'; } else { element.src = resource; } document.getElementsByTagName('head')[0].appendChild(element); }, createDplayer: (video, type, elem) => { const host = '//s0.pstatp.com/cdn/expire-1-M'; const resources = [ '/dplayer/1.25.0/DPlayer.min.css', '/dplayer/1.25.0/DPlayer.min.js', '/hls.js/0.12.4/hls.light.min.js', '/flv.js/1.5.0/flv.min.js' ]; let unloadedResourceCount = resources.length; resources.forEach(resource => { previewHandler.loadResource(host + resource, () => { if (!--unloadedResourceCount) { let option = { url: video } if (type === 'flv') { option.type = 'flv'; } new DPlayer({ container: elem, screenshot: true, video: option }); } }) }); } } const suffix = path.split('.').pop(); let content = document.querySelector('.content'); switch (previewHandler.fileType(suffix)) { case 'image': let img = new Image(); img.style.maxWidth = '100%'; img.src = url; let fancy = document.createElement('a'); fancy.setAttribute('data-fancybox', 'image'); fancy.href = img.src; fancy.append(img); content.innerHTML = ''; content.append(fancy); break; case 'audio': let audio = new Audio(); audio.style.outline = 'none'; audio.preload = 'auto'; audio.controls = 'controls'; audio.style.width = '100%'; audio.src = url; content.innerHTML = ''; content.append(audio); break; case 'video': let video = document.createElement('div'); previewHandler.createDplayer(url, suffix, video); content.innerHTML = ''; content.append(video); break; case 'text': let pre = document.createElement('pre'); let code = document.createElement('code'); pre.append(code); pre.style.background = 'rgb(245,245,245)'; pre.style['overflow-x'] = 'scroll'; pre.classList.add(suffix); content.style['text-align'] = 'initial'; content.innerHTML = ''; content.append(pre); sendRequest('GET', url, null, null, data => { code.textContent = data; if (size.indexOf(' B') >= 0 || size.indexOf(' KB') && size.split(' ')[0] < 100 ) { hljs.highlightBlock(pre); } }); break; case 'office': const officeOnline = '//view.officeapps.live.com/op/view.aspx?src=' + encodeURIComponent(url); let div = document.createElement('div'); div.style.lineHeight = '2em'; div.style.background = 'rgba(218, 215, 215, 0.21)'; div.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)'; div.style.cursor = 'pointer'; div.innerHTML = '新窗口打开'; div.addEventListener('click', () => window.open(officeOnline)); content.innerHTML = ''; content.appendChild(div); if (document.body.clientWidth >= 480) { let iframe = document.createElement('iframe'); iframe.width = '100%'; iframe.style.height = '41em'; iframe.style.border = '0'; iframe.src = officeOnline; content.appendChild(iframe); } break; default: content.style['text-align'] = 'center'; content.innerHTML = '该文件不支持预览'; break; } document.querySelector('.file-name').innerHTML = path; document.querySelector('.btn.download').addEventListener('click', () => location.href = url ); document.querySelector('.btn.quote').addEventListener('click', event => { previewHandler.copyTextContent(null, window.api.url + '?file=' + path); const btn = document.querySelector('.btn.quote'); btn.innerHTML = '已复制'; setTimeout(() => btn.innerHTML = '引用', 250); } ); document.querySelector('.btn.share').addEventListener('click', event => { const sharePath = () => { let arr = window.backFordwardCache.current.split('/'); let r = ''; for (let i = 1; i < arr.length; i++) { r += '/' + arr[i]; } return r; } previewHandler.copyTextContent(null, window.location.origin + window.location.pathname + '?path=' + sharePath()); const btn = document.querySelector('.btn.share'); btn.innerHTML = '已复制'; setTimeout(() => btn.innerHTML = '分享', 250); } ); switchRightDisplay('preview'); let start = null; let right = document.querySelector('.right'); const scrollToBottom = (timestamp) => { if (!start) start = timestamp; let progress = timestamp - start; let last = right.scrollTop; right.scrollTo(0, right.scrollTop + 14); if (right.scrollTop !== last && progress < 1000 * 2) { window.requestAnimationFrame(scrollToBottom); } }; window.requestAnimationFrame(scrollToBottom); }); } else { elem.addEventListener('click', event => { fetchFileList(path); switchBackForwardStatus(path); }); } } function addBackForwardListener() { document.getElementById('arrow-back').addEventListener('click', back); document.getElementById('arrow-forward').addEventListener('click', forward); document.querySelector('#main-page').addEventListener('click', () => { fetchFileList(window.api.root); switchBackForwardStatus(window.api.root); }); } function switchRightDisplay(display) { if (display === 'preview') { document.querySelector('.list-header').style.display = 'none'; document.querySelector('#file-list').style.display = 'none'; document.querySelector('.markdown-body').style.display = 'none'; document.querySelector('.password').style.display = 'none'; document.querySelector('.preview').style.display = 'initial' } else if (display === 'encrypted') { document.querySelector('.list-header').style.display = 'none'; document.querySelector('#file-list').style.display = 'none'; document.querySelector('.markdown-body').style.display = 'none'; document.querySelector('.preview').style.display = 'none'; document.querySelector('.password').style.display = 'initial'; document.querySelector('#readme').innerHTML = ''; let content = document.querySelector('.preview .content'); if (content) { document.querySelector('.preview .content').innerHTML = ''; } } else { document.querySelector('.list-header').style.display = 'initial'; document.querySelector('#file-list').style.display = 'initial'; document.querySelector('.markdown-body').style.display = 'none' document.querySelector('.preview').style.display = 'none'; document.querySelector('.password').style.display = 'none'; document.querySelector('#readme').innerHTML = ''; let content = document.querySelector('.preview .content'); if (content) { document.querySelector('.preview .content').innerHTML = ''; } } } function switchBackForwardStatus(path) { if (path) { window.backFordwardCache.deepest = path; } if (window.backFordwardCache.root !== window.backFordwardCache.current) { window.backFordwardCache.backable = true; document.getElementById('arrow-back').style.color = 'black'; } else { window.backFordwardCache.backable = false; document.getElementById('arrow-back').style.color = 'rgb(218, 215, 215)'; } if (window.backFordwardCache.deepest !== window.backFordwardCache.current) { window.backFordwardCache.forwardable = true; document.getElementById('arrow-forward').style.color = 'black'; } else { window.backFordwardCache.forwardable = false; document.getElementById('arrow-forward').style.color = 'rgb(218, 215, 215)'; } } function back() { if (!window.backFordwardCache.backable) { return; } if (window.backFordwardCache.preview) { fetchFileList(window.backFordwardCache.current); } else { let former = (() => { let formerEndIndex = window.backFordwardCache.current.lastIndexOf('/'); return window.backFordwardCache.current.substring(0, formerEndIndex); })(); former = former || window.api.root; fetchFileList(former); switchBackForwardStatus(); } // console.log(window.backFordwardCache); } function forward() { if (!window.backFordwardCache.forwardable) { return } const current = window.backFordwardCache.current === window.api.root ? '' : window.backFordwardCache.current const subLength = current ? current.length : 0; const later = current + '/' + window.backFordwardCache.deepest.substring(subLength).split('/')[1]; fetchFileList(later); switchBackForwardStatus(); // console.log(window.backFordwardCache); } async function preCache(files, level) { if (level > 2) return; files.files.forEach(file => { const parent = files.parent === '/' ? '' : files.parent const path = parent + '/' + file.name; if (!file.url) { // console.log('caching ' + path + ', level ' + level); window.fileCache.set(path, true); sendRequest(window.api.method, window.api.url, window.api.formatPayload(path), window.api.headers, data => { const files = JSON.parse(data); window.fileCache.set(path, files); preCache(files, level + 1); }, () => window.fileCache.set(path, false) ); } else if (file.name.split('.').pop() === 'md') { // console.log('caching ' + path + ', level ' + level); window.fileCache.set(path, true); sendRequest('GET', file.url, null, null, text => window.fileCache.set(path, text), () => window.fileCache.set(path, false)); } }); } async function preCacheCheck(cache, path) { cache.files.forEach(file => { const prefix = path === window.api.root ? '' : path; const nextPath = prefix + '/' + file.name; const pathCache = window.fileCache.get(nextPath); if (!file.url) { if (!pathCache && pathCache !== true) { // console.log('inner caching ' + nextPath); window.fileCache.set(nextPath, true); sendRequest(window.api.method, window.api.url, window.api.formatPayload(nextPath), window.api.headers, data => { const files = JSON.parse(data); window.fileCache.set(nextPath, files); preCache(files, 0); }, () => window.fileCache.set(nextPath, false) ); } } else if (file.name.split('.').pop() === 'md') { if (!pathCache && pathCache !== true) { // console.log('inner caching ' + nextPath); window.fileCache.set(nextPath, true); sendRequest('GET', file.url, null, null, text => window.fileCache.set(nextPath, text), () => window.fileCache.set(nextPath, false)); } } }); } function fetchFileList(path) { // console.log('fetching ' + path); let loading = document.querySelector('.loading-wrapper'); loading.style.display = 'initial'; window.backFordwardCache.preview = false; window.backFordwardCache.current = path; let cache = window.fileCache.get(path); if (cache === true) { let cacheWaitFileListFetch = setInterval(() => { cache = window.fileCache.get(path); if (typeof cache === 'object') { renderPage(null, cache); preCacheCheck(cache, path); clearInterval(cacheWaitFileListFetch); } else if (cache === false) { clearInterval(cacheWaitFileListFetch); loading.style.color = 'red'; loading.innerText = 'Failed!'; setTimeout(() => { loading.style.display = 'none'; loading.style.color = 'white'; loading.innerText = 'Loading..'; }, 2000); } }, 100); } else if (cache) { renderPage(null, cache); preCacheCheck(cache, path); } else { window.fileCache.set(path, true); sendRequest(window.api.method, window.api.url, window.api.formatPayload(path), window.api.headers, renderPage ); } } document.addEventListener('DOMContentLoaded', () => { document.title = window.GLOBAL_CONFIG.SITE_NAME; document.querySelector('.site').textContent = window.GLOBAL_CONFIG.SITE_NAME; window.api = { root: '/', url: window.GLOBAL_CONFIG.SCF_GATEWAY, method: 'POST', formatPayload: (path, passwd) => { return '?path=' + encodeURIComponent(path) + '&encrypted=' + window.api.accessToken.encrypted + '&plain=' + window.api.accessToken.plain + '&passwd=' + passwd; }, headers: { 'Content-type': 'application/x-www-form-urlencoded' } } window.backFordwardCache = { root: window.api.root, deepest: window.api.root, current: window.api.root, backable: false, forwardable: false, preview: false } window.fileCache = new Map(); const initialPath = new URLSearchParams(window.location.search).get('path') || window.api.root; if (window.GLOBAL_CONFIG.IS_CF) { window.api.accessToken = { encrypted: '', plain: '' }; fetchFileList(initialPath); addBackForwardListener(); } else { sendRequest(window.api.method, window.api.url + '?accessToken', null, window.api.headers, data => { const accessToken = JSON.parse(data); window.api.accessToken = { encrypted: accessToken.encrypted, plain: accessToken.plain }; fetchFileList(initialPath); addBackForwardListener(); } ); } }); Loading... ONEDRIVE ITEMS TIME SIZE 下载 引用 分享 提交"}],"posts":[{"title":"小米路由4A千兆版安装openwrt教程（R4A）","slug":"小米路由4A千兆版（R4A）安装openwrt免拆机","date":"2020-12-11T08:36:36.985Z","updated":"2020-12-11T11:50:24.859Z","comments":true,"path":"type/xiaomi.html","link":"","permalink":"https://mrxie98.github.io/type/xiaomi.html","excerpt":"","text":"一、前言及注意事项听说软路由玩起来不错，奈何资金不到位，于是五十块在咸鱼淘了一块小米路由4A千兆版，起初以为刷起来比较简单，有开发板，结果买回来发现各种坑。经过实践需要注意的有以下几个问题：1.OpenWRTInvasion版本一些问题2.python安装方法不对以及命令相关的一些问题3.不够细心，互联网相关资料比较多但是方法不一，有些可能已经失效。4.OpenWRTInvasion教程需要路由器联网，这个教程可以不给路由联网，因为恩山无线论坛一位朋友改过源码，提前下好软件安装好资料就可以。 二、环境安装1.首先安装python，这里推荐安装3.7.4，32位64根据自己所装系统选择 开始下载 2.下载下面的压缩包并解压，解压好后把打开网络适配器把IP配置成静态IP，地址为：192.168.31.88 其次确定路由器LAN口已经和电脑连接，并且管理地址是：192.168.31.1 如果不是，请更改或恢复。 开始下载 3。打开解压好的文件夹找到chfs-windows-x64-1.0文件夹里面的chfs.exe，即可运行一个简易的http服务器，可以根据界面提示访问192.168.31.88应该看到如下界面 三、刷入breed，并安装固件1.进入路由器界面登录获取stok值，然后打开cmd终端cd到OpenWRTInvasion-0.0.3文件夹运行remote_command_execution_vulnerability.py输入stok值【填写等号后面/前面值即可】，如果这一步报错可能是因为没有安装pip3,在终端操作下面命令： 1pip3 install requests 2.操作完上面一步会提示让你telnet 192.168.31.1 直接在终端操作，按下回车输入root即可。看到are u ok 后分别输入下面三段代码，等待路由器重启。 123cd &#x2F;tmpwget http:&#x2F;&#x2F;192.168.31.88&#x2F;shared&#x2F;breed-mt7621-pbr-m1.binmtd -r write breed-mt7621-pbr-m1.bin Bootloader 3.等待路由器重启后你会发现是紫色灯很暗，这个时候breed已经刷入成功了，把电脑地址改为自动获取地址后访问192.168.1.1 备份好eeprom（重要），同时刷入eeprom 和 openwrt即可里面有三个固件任选一个即可，其余固件自测。4.刷完后等待路由器重启即可看到openwrt的WiFi信号，说明已经成功。剩下的需要自己配置，查看路由器地址并且登入，配置WiFi以及 “不被允许的行为”。潘多拉的固件管理员密码不详没有测试openwrt的密码一个是root一个是password 4.刷好后不能上网可能是路由器IP地址跟光猫的路由器地址冲突，改一下即可。致谢：小米R4A无脑刷breed及固件 @Lonny_Lee","categories":[],"tags":[{"name":"文章","slug":"文章","permalink":"https://mrxie98.github.io/tags/%E6%96%87%E7%AB%A0/"},{"name":"玩机","slug":"玩机","permalink":"https://mrxie98.github.io/tags/%E7%8E%A9%E6%9C%BA/"},{"name":"教程","slug":"教程","permalink":"https://mrxie98.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"影视推荐 机器人总动员-国语","slug":"机器人总动员","date":"2020-12-08T13:28:58.691Z","updated":"2020-12-08T15:58:21.481Z","comments":true,"path":"type/jiqiren.html","link":"","permalink":"https://mrxie98.github.io/type/jiqiren.html","excerpt":"","text":"机器人总动员 WALL·E (2008) 导演：安德鲁·斯坦顿 编剧：安德鲁·斯坦顿/吉姆·里尔顿/彼特·道格特 主演：本·贝尔特/艾丽莎·奈特/杰夫·格尔林/ 佛莱德·威拉特/西格妮·韦弗/MacInTalk/约翰·拉岑贝格/凯茜·纳基麦/泰迪·牛顿/鲍伯·伯根/洛丽·理查德森/吉姆·瓦德/彼特·道格特/安德鲁·斯坦顿/杰夫·皮金/约翰·齐甘/米凯·麦高万/雪莉·琳恩/克莱特·惠特克/唐纳德·富利洛夫/罗里·艾伦/杰斯·哈梅尔/拉瑞恩·纽曼/扬·拉布森/保罗·伊丁 类型：科幻/爱情/冒险/动画 地区：美国 上映：2008-06-27(美国) 评分：豆瓣 9.3/IMDB 8.4 /时光网 9.0 /烂番茄 95% 电影介绍: &nbsp;&nbsp;&nbsp;&nbsp;公元2805年，人类文明高度发展，却因污染和生活垃圾大量增加使得地球不再适于人类居住。地球人被迫乘坐飞船离开故乡，进行一次漫长无边的宇宙之旅。临行前他们委托Buynlarge的公司对地球垃圾进行清理，该公司开发了名为WALL·E（Waste Allocation Loa d Lifters – Earth 地球废品分装员）的机器人担当此重任。 #news{ font-weight: 900; font-size: 25px; color: #777777;} #container {width: 100%;} #photo {float: left; padding: 50px 30px 3px; text-align: justify;width: 290px} #content { width: 100%;color: #777777; font-size: 16px; padding: 43px 30px;text-align: justify;font-weight: 600;border-radius: 15px 50px; border: 2px dashed #f5b414; }","categories":[],"tags":[{"name":"电影","slug":"电影","permalink":"https://mrxie98.github.io/tags/%E7%94%B5%E5%BD%B1/"}]},{"title":"影视推荐 返校-国语","slug":"返校","date":"2020-12-08T13:28:58.691Z","updated":"2020-12-12T14:28:52.283Z","comments":true,"path":"type/fanxiao.html","link":"","permalink":"https://mrxie98.github.io/type/fanxiao.html","excerpt":"","text":"返校 (2019) 导演：徐汉强 编剧：徐汉强/傅凯羚/简士耕 主演：王净/傅孟柏/曾敬骅 类型：剧情/恐怖/惊悚 地区：台湾 上映：2019-09-20(台湾) / 2019-12-05(香港) 片长：103分钟 评分：IMDB 6.9 电影介绍: &nbsp;&nbsp;&nbsp;&nbsp;《返校》是一部于2019年上映的台湾校园悬疑历史惊悚片。 改编自赤烛游戏的同名电脑游戏，由华纳兄弟发行。 此电影由徐汉强执导，王净、傅孟柏、曾敬骅、蔡思韵及朱宏章主演，讲述在台湾白色恐怖时期的山区高中里，一群不愿服从威权体制的左派份子受到迫害的故事。 电影于2019年9月20日在台湾上映。 #news{ font-weight: 900; font-size: 25px; color: #777777;} #container {width: 100%;} #photo {float: left; padding: 50px 30px 3px; text-align: justify;width: 290px} #content { width: 100%;color: #777777; font-size: 16px; padding: 43px 30px;text-align: justify;font-weight: 600;border-radius: 15px 50px; border: 2px dashed #f5b414; }","categories":[],"tags":[{"name":"电影","slug":"电影","permalink":"https://mrxie98.github.io/tags/%E7%94%B5%E5%BD%B1/"}]},{"title":"影视推荐 千与千寻-国语","slug":"千与千寻","date":"2020-12-08T13:28:58.687Z","updated":"2020-12-08T15:58:32.292Z","comments":true,"path":"type/qianyu.html","link":"","permalink":"https://mrxie98.github.io/type/qianyu.html","excerpt":"","text":"千与千寻 千と千尋の神隠し (2001) 导演：宫崎骏 编剧：宫崎骏 主演：柊瑠美/入野自由/夏木真理/菅原文太/中村彰男/玉井夕海/神木隆之介/内藤刚志/泽口靖子/我修院达也/大泉洋/小林郁夫/上条恒彦/小野武彦 类型：剧情/奇幻/动画/人性 地区：日本 上映：2001-07-20(日本) 评分：豆瓣 9.4/IMDB 8.6 /时光网 8.9 /烂番茄 97% 电影介绍: &nbsp;&nbsp;&nbsp;&nbsp;千寻和爸爸妈妈一同驱车前往新家，在郊外的小路上不慎进入了神秘的隧道——他们去到了另外一个诡异世界—一个中世纪的小镇。远处飘来食物的香味，爸爸妈妈大快朵颐，孰料之后变成了猪！这时小镇上渐渐来了许多样子古怪、半透明的人。 #news{ font-weight: 900; font-size: 25px; color: #777777;} #container {width: 100%;} #photo {float: left; padding: 50px 30px 3px; text-align: justify;width: 290px} #content { width: 100%;color: #777777; font-size: 16px; padding: 43px 30px;text-align: justify;font-weight: 600;border-radius: 15px 50px; border: 2px dashed #f5b414; }","categories":[],"tags":[{"name":"电影","slug":"电影","permalink":"https://mrxie98.github.io/tags/%E7%94%B5%E5%BD%B1/"}]}],"categories":[],"tags":[{"name":"文章","slug":"文章","permalink":"https://mrxie98.github.io/tags/%E6%96%87%E7%AB%A0/"},{"name":"玩机","slug":"玩机","permalink":"https://mrxie98.github.io/tags/%E7%8E%A9%E6%9C%BA/"},{"name":"教程","slug":"教程","permalink":"https://mrxie98.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"电影","slug":"电影","permalink":"https://mrxie98.github.io/tags/%E7%94%B5%E5%BD%B1/"}]}